# name of our workflow
name: Django CI/CD Workflow

# triggers for our workflow
on:
  # opening a pull request to master and develop branch will be a trigger
  pull_request:
    branches:
      - master
  # any code pushed to master and develop branch will also be a trigger
  push:
    branches:
      - master

# three job definition
jobs:
  test-job: # health check job for testing and code formatting check
    runs-on: ubuntu-latest # os for running the job
    services:
      postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
        image: postgres
        env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
          POSTGRES_USER: ${{env.DB_USER}}
          POSTGRES_PASSWORD: ${{env.DB_PASSWORD}}
          POSTGRES_DB: ${{env.DB_NAME}}
        ports:
          - 5432:5432 # exposing 5432 port for application to use
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v2
      - name: Setup python environment # setting python environment to 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
      - name: Check Python version # checking the python version to see if 3.x is installed.
        run: python --version
      - name: Install dependancies # install application requirements
        run: |
          pip install pipenv
          pipenv install --deploy

      - name: Run Migrations # run migrations to create table in side car db container
        env:
          DB_NAME: ${{env.DB_NAME}}
          DB_USER: ${{env.DB_USER}}
          DB_PASSWORD: ${{env.DB_PASSWORD}}
          DB_HOST: ${{env.DB_HOST}}
          DB_PORT: ${{env.DB_PORT}}
        run: python manage.py migrate
      - name: Run Test # running tests
        env:
          DB_NAME: ${{env.DB_NAME}}
          DB_USER: ${{env.DB_USER}}
          DB_PASSWORD: ${{env.DB_PASSWORD}}
          DB_HOST: ${{env.DB_HOST}}
          DB_PORT: ${{env.DB_PORT}}
        run: python manage.py test